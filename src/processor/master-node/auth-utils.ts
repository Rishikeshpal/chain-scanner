import {abi, cry} from 'thor-devkit'
import { Thor } from '../../thor-rest'

// Set EVM version to 'byzantium' in complier for using in Pre-ETH_CONST blocks.
// Compiled data of 'auth-utils.sol'
const bytecode = '0x608060405234801561001057600080fd5b50611480806100206000396000f3fe608060405234801561001057600080fd5b5060043610610069576000357c01000000000000000000000000000000000000000000000000000000009004806310c4e8b01461006e578063629a4b521461008c5780636f0470aa146100aa578063a0dee1fe146100c8575b600080fd5b6100766100e6565b604051610083919061130b565b60405180910390f35b610094610581565b6040516100a19190611348565b60405180910390f35b6100b26106bc565b6040516100bf919061130b565b60405180910390f35b6100d0610b84565b6040516100dd919061130b565b60405180910390f35b60608060c867ffffffffffffffff8111801561010157600080fd5b506040519080825280602002602001820160405280156101305781602001602082028036833780820191505090505b50905060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633df4ddf46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156101dd57600080fd5b505afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190611116565b905060008090505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610392578183828151811061025e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab73e316836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161033391906112f0565b60206040518083038186803b15801561034b57600080fd5b505afa15801561035f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103839190611116565b9150808060010191505061021d565b60608167ffffffffffffffff811180156103ab57600080fd5b506040519080825280602002602001820160405280156103e557816020015b6103d2611069565b8152602001906001900390816103ca5790505b50905060008090505b828110156105765760008060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2bc2efc89868151811061046957fe5b60200260200101516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104a991906112f0565b60806040518083038186803b1580156104c157600080fd5b505afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f9919061113f565b9350935093505060405180608001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182151581525085858151811061055b57fe5b602002602001018190525050505080806001019150506103ee565b508094505050505090565b60007f506172616d7300000000000000000000000000000000000000000000000000007a010000000000000000000000000000000000000000000000000000900465ffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638eaa6ac07f70726f706f7365722d656e646f7273656d656e740000000000000000000000006c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff166001026040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610667919061132d565b60206040518083038186803b15801561067f57600080fd5b505afa158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b791906111a2565b905090565b606060006106c8610581565b90506060606567ffffffffffffffff811180156106e457600080fd5b5060405190808252806020026020018201604052801561071e57816020015b61070b611069565b8152602001906001900390816107035790505b50905060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633df4ddf46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190611116565b905060008090505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ac65760008060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2bc2efc866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016108df91906112f0565b60806040518083038186803b1580156108f757600080fd5b505afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f919061113f565b93509350935050868373ffffffffffffffffffffffffffffffffffffffff16311015801561095d5750606584105b156109d15760405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018215158152508685815181106109bd57fe5b602002602001018190525083806001019450505b7f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab73e316866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a6c91906112f0565b60206040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611116565b945050505061080b565b6065811415610adb5782945050505050610b81565b60608167ffffffffffffffff81118015610af457600080fd5b50604051908082528060200260200182016040528015610b2e57816020015b610b1b611069565b815260200190600190039081610b135790505b50905060008090505b82811015610b7757848181518110610b4b57fe5b6020026020010151828281518110610b5f57fe5b60200260200101819052508080600101915050610b37565b5080955050505050505b90565b60606000610b90610581565b90506060606567ffffffffffffffff81118015610bac57600080fd5b50604051908082528060200260200182016040528015610be657816020015b610bd3611069565b815260200190600190039081610bcb5790505b50905060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633df4ddf46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611116565b9050600080905060008090505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610fa95760008060007f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2bc2efc876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610dac91906112f0565b60806040518083038186803b158015610dc457600080fd5b505afa158015610dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfc919061113f565b93509350935050878373ffffffffffffffffffffffffffffffffffffffff163110158015610e2a5750606585105b15610eb457600015158115151415610eab5760405180608001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001821515815250878581518110610e9757fe5b602002602001018190525083806001019450505b84806001019550505b7f417574686f72697479000000000000000000000000000000000000000000000077010000000000000000000000000000000000000000000000900468ffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ab73e316876040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f4f91906112f0565b60206040518083038186803b158015610f6757600080fd5b505afa158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190611116565b9550505050610cd8565b6065811415610fbf578395505050505050611066565b60608167ffffffffffffffff81118015610fd857600080fd5b5060405190808252806020026020018201604052801561101257816020015b610fff611069565b815260200190600190039081610ff75790505b50905060008090505b8281101561105b5785818151811061102f57fe5b602002602001015182828151811061104357fe5b6020026020010181905250808060010191505061101b565b508096505050505050505b90565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000151581525090565b6000815190506110d1816113ee565b92915050565b6000815190506110e681611405565b92915050565b6000815190506110fb8161141c565b92915050565b60008151905061111081611433565b92915050565b60006020828403121561112857600080fd5b6000611136848285016110c2565b91505092915050565b6000806000806080858703121561115557600080fd5b6000611163878288016110d7565b9450506020611174878288016110c2565b9350506040611185878288016110ec565b9250506060611196878288016110d7565b91505092959194509250565b6000602082840312156111b457600080fd5b60006111c284828501611101565b91505092915050565b60006111d7838361128c565b60808301905092915050565b6111ec8161139c565b82525050565b6111fb8161139c565b82525050565b600061120c82611373565b611216818561138b565b935061122183611363565b8060005b8381101561125257815161123988826111cb565b97506112448361137e565b925050600181019050611225565b5085935050505092915050565b611268816113ae565b82525050565b611277816113ba565b82525050565b611286816113ba565b82525050565b6080820160008201516112a260008501826111e3565b5060208201516112b560208501826111e3565b5060408201516112c8604085018261126e565b5060608201516112db606085018261125f565b50505050565b6112ea816113e4565b82525050565b600060208201905061130560008301846111f2565b92915050565b600060208201905081810360008301526113258184611201565b905092915050565b6000602082019050611342600083018461127d565b92915050565b600060208201905061135d60008301846112e1565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b60006113a7826113c4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6113f78161139c565b811461140257600080fd5b50565b61140e816113ae565b811461141957600080fd5b50565b611425816113ba565b811461143057600080fd5b50565b61143c816113e4565b811461144757600080fd5b5056fea264697066735822122068ab93d481b4ca5d57b930133526bf44c2dfca77271fcb3cd8ea37b51808d4d864736f6c63430006060033'
// tslint:disable-next-line: max-line-length
const listAllABI = { inputs: [], name: 'all', outputs: [{ components: [{ internalType: 'address', name: 'master', type: 'address' }, { internalType: 'address', name: 'endorsor', type: 'address' }, { internalType: 'bytes32', name: 'identity', type: 'bytes32' }, { internalType: 'bool', name: 'active', type: 'bool' }], internalType: 'struct AuthorityUtils.Candidate[]', name: 'list', type: 'tuple[]' }], stateMutability: 'nonpayable', type: 'function' }
// tslint:disable-next-line: max-line-length
const inActivesABI = { inputs: [], name: 'inactives', outputs: [{ components: [{ internalType: 'address', name: 'master', type: 'address' }, { internalType: 'address', name: 'endorsor', type: 'address' }, { internalType: 'bytes32', name: 'identity', type: 'bytes32' }, { internalType: 'bool', name: 'active', type: 'bool' }], internalType: 'struct AuthorityUtils.Candidate[]', name: 'list', type: 'tuple[]' }], stateMutability: 'nonpayable', type: 'function' }

const listAll = new abi.Function(listAllABI as any as abi.Function.Definition)
const inActives = new abi.Function(inActivesABI as any as abi.Function.Definition)

// txID + clauseIndex + creationCount 0x841a6556c524d47030762eb14dc4af897e605d9b
const contractAddr = '0x' + cry.keccak256(Buffer.alloc(40)).slice(12).toString('hex')
/* here we use `POST /account/*` to simulate executing a tx, clause#0 to deploy a `ghost contract`
   which will be dropped after the request, the txID in `POST /account/*` is zero by default then
   we can compute the contract deployed offline and call the methods in clause#1
*/

interface MasterNode {
    master: string,
    endorsor: string,
    identity: string,
    active: boolean,
}

export const ListAll = async (thor: Thor, blockID: string) => {
    const ret = await thor.explain({
        clauses: [
            {
                to: null,
                value: '0',
                data: bytecode
            }, {
                to: contractAddr,
                value: '0',
                data: listAll.encode()
            }]
    }, blockID)

    if (ret[0].reverted || ret[1].reverted) {
        throw new Error('execution reverted')
    }
    return listAll.decode(ret[1].data).list as MasterNode[]
}

export const ListInactive = async (thor: Thor, blockID: string) => {
    const ret = await thor.explain({
        clauses: [
            {
                to: null,
                value: '0',
                data: bytecode
            }, {
                to: contractAddr,
                value: '0',
                data: inActives.encode()
            }]
    }, blockID)

    if (ret[0].reverted || ret[1].reverted) {
        throw new Error('execution reverted')
    }
    return inActives.decode(ret[1].data).list as MasterNode[]
}

