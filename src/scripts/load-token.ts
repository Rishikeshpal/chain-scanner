import { Network } from '../const'
import { Net } from '../net'
import { Token, AssetType } from '../types'
import { promises as fs } from 'fs'
import * as path from 'path'

const ghIO = new Net("https://vechain.github.io")

const Supported = Object.keys(AssetType).filter(x => x !== parseFloat(x).toString())
const list: { [index: string]: { [index: string]: Token } } = {
    [Network.MainNet]: {},
    [Network.TestNet]: {},
}
const genesis: { [index: string]: { [index: string]: { [address: string]: string } } } = {
    [Network.MainNet]: {
        'EHrT': { '0x8d8d8a0c77628926908dedaf3fbffce3d416fc2d': '10000000000000000000000000000' },
        'DBET': { '0x1b8ec6c2a45cca481da6f243df0d7a5744afc1f8': '205903294831970956466297922' },
        'VEED': { '0x1eb065a93bf325f53abc47c23289946bedec3d72': '100000000000000000000000000000' },
    },
    [Network.TestNet]: {
        'EHrT': { '0xb5d8da87b6a92cc37477048b4bcd7b8070c843a7': '10000000000000000000000000000' },
        'DBET': { '0x510fcddc9424b1bbb328a574f45bfddb130e1f03': '205903294831970956466297922' },
        'VEED': { '0x9860a75e0b2746b4ee459483dd095206b761f9a6': '100000000000000000000000000000' },
    }
}

const makeFileContent = (list:object) => {
    return `/* this file is generated by scripts/load-token */
import { Network } from './const'
import { Token } from './types'
export const list:{ [index: string]: { [index: string]: Token } } = ${JSON.stringify(list)}
export const getVIP180Token = (net: Network, symbol: string) => {
    if (!list[net]) {
        throw new Error('unknown network: ' + net)
    }

    if (!list[net][symbol]) {
        throw new Error('unknown token: ' + symbol+ 'at net: '+ net === Network.MainNet ? 'MaiNet': 'TestNet')
    }

    return list[net][symbol]
}
`
}

void (async () => {
    const pending = []

    const mainnet = await ghIO.http<Array<Omit<Token, 'genesis'>>>('GET', '/token-registry/main.json')
    for (const item of mainnet) {
        if (item.symbol === 'VTHO' || item.symbol === 'VET') {
            continue
        }

        if (Supported.indexOf(item.symbol) !== -1) {
            const token: Token = {
                name: item.name,
                symbol: item.symbol,
                address: item.address,
                decimals: item.decimals
            }
            if (genesis[Network.MainNet][token.symbol]) {
                token.genesis = genesis[Network.MainNet][token.symbol]
            }
            list[Network.MainNet][token.symbol] = token
        } else {
            pending.push(item.symbol)
        }
    }

    const testnet = await ghIO.http<Array<Omit<Token, 'genesis'>>>('GET', '/token-registry/test.json')
    for (const item of testnet) {
        if (item.symbol === 'VTHO' || item.symbol === 'VET') {
            continue
        }

        if (Supported.indexOf(item.symbol) !== -1) {
            const token: Token = {
                name: item.name,
                symbol: item.symbol,
                address: item.address,
                decimals: item.decimals
            }
            if (genesis[Network.TestNet][token.symbol]) {
                token.genesis = genesis[Network.TestNet][token.symbol]
            }
            list[Network.TestNet][token.symbol] = token
        }
    }

    const file = await fs.open(path.join(__dirname, "../token-list.ts"), 'w')
    await file.write(makeFileContent(list))
    await file.close()

    console.log('Pending: ' + pending.join(', '))
    process.exit(0)
})().catch((e) => {
    console.log(e)
    process.exit(-1)
})